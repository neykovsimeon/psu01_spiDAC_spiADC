Version 3.2 HI-TECH Software Intermediate Code
"396 C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c
[v __npowers_ `Cd ~T0 @X0 -> 0 `x e ]
[v __powers_ `Cd ~T0 @X0 -> 0 `x e ]
"10 C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\c90\stdarg.h
[v ___va_start `(*v ~T0 @X0 0 ef ]
[p i ___va_start ]
"7 C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\c90\ctype.h
[v _isdigit `(b ~T0 @X0 0 ef1`uc ]
"13 C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\c90\stdarg.h
[v ___va_arg `(*v ~T0 @X0 0 ev`*v ]
[p i ___va_arg ]
"402 C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c
[v __tdiv_to_l_ `(ul ~T0 @X0 0 ef2`f`f ]
"400
[v __div_to_l_ `(ul ~T0 @X0 0 ef2`d`d ]
[; ;__size_t.h: 4: typedef unsigned size_t;
[; ;stdarg.h: 7: typedef void * va_list[1];
[; ;stdarg.h: 10: extern void * __va_start(void);
[; ;stdarg.h: 13: extern void * __va_arg(void *, ...);
[; ;stdio.h: 43: struct __prbuf
[; ;stdio.h: 44: {
[; ;stdio.h: 45: char * ptr;
[; ;stdio.h: 46: void (* func)(char);
[; ;stdio.h: 47: };
[; ;errno.h: 29: extern int errno;
[; ;conio.h: 12: extern void init_uart(void);
[; ;conio.h: 14: extern char getch(void);
[; ;conio.h: 15: extern char getche(void);
[; ;conio.h: 16: extern void putch(char);
[; ;conio.h: 17: extern void ungetch(char);
[; ;conio.h: 19: extern __bit kbhit(void);
[; ;conio.h: 23: extern char * cgets(char *);
[; ;conio.h: 24: extern void cputs(const char *);
[; ;stdio.h: 88: extern int cprintf(char *, ...);
[; ;stdio.h: 93: extern int _doprnt(struct __prbuf *, const register char *, register va_list);
[; ;stdio.h: 183: extern char * gets(char *);
[; ;stdio.h: 184: extern int puts(const char *);
[; ;stdio.h: 185: extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
[; ;stdio.h: 186: extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
[; ;stdio.h: 187: extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
[; ;stdio.h: 188: extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
[; ;stdio.h: 189: extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
[; ;stdio.h: 190: extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));
[; ;stdio.h: 194: extern int sprintf(char *, const char *, ...);
[; ;stdio.h: 195: extern int printf(const char *, ...);
[; ;ctype.h: 4: extern __bit isalpha(char);
[; ;ctype.h: 5: extern __bit isupper(char);
[; ;ctype.h: 6: extern __bit islower(char);
[; ;ctype.h: 7: extern __bit isdigit(char);
[; ;ctype.h: 8: extern __bit isxdigit(char);
[; ;ctype.h: 9: extern __bit isspace(char);
[; ;ctype.h: 10: extern __bit ispunct(char);
[; ;ctype.h: 11: extern __bit isalnum(char);
[; ;ctype.h: 12: extern __bit isprint(char);
[; ;ctype.h: 13: extern __bit isgraph(char);
[; ;ctype.h: 14: extern __bit iscntrl(char);
[; ;ctype.h: 17: extern char toupper(char);
[; ;ctype.h: 18: extern char tolower(char);
[; ;stdlib.h: 7: typedef unsigned short wchar_t;
[; ;stdlib.h: 15: typedef struct {
[; ;stdlib.h: 16: int rem;
[; ;stdlib.h: 17: int quot;
[; ;stdlib.h: 18: } div_t;
[; ;stdlib.h: 19: typedef struct {
[; ;stdlib.h: 20: unsigned rem;
[; ;stdlib.h: 21: unsigned quot;
[; ;stdlib.h: 22: } udiv_t;
[; ;stdlib.h: 23: typedef struct {
[; ;stdlib.h: 24: long quot;
[; ;stdlib.h: 25: long rem;
[; ;stdlib.h: 26: } ldiv_t;
[; ;stdlib.h: 27: typedef struct {
[; ;stdlib.h: 28: unsigned long quot;
[; ;stdlib.h: 29: unsigned long rem;
[; ;stdlib.h: 30: } uldiv_t;
[; ;stdlib.h: 65: extern double atof(const char *);
[; ;stdlib.h: 66: extern double strtod(const char *, const char **);
[; ;stdlib.h: 67: extern int atoi(const char *);
[; ;stdlib.h: 68: extern unsigned xtoi(const char *);
[; ;stdlib.h: 69: extern long atol(const char *);
[; ;stdlib.h: 73: extern long strtol(const char *, char **, int);
[; ;stdlib.h: 75: extern int rand(void);
[; ;stdlib.h: 76: extern void srand(unsigned int);
[; ;stdlib.h: 77: extern void * calloc(size_t, size_t);
[; ;stdlib.h: 78: extern div_t div(int numer, int denom);
[; ;stdlib.h: 79: extern udiv_t udiv(unsigned numer, unsigned denom);
[; ;stdlib.h: 80: extern ldiv_t ldiv(long numer, long denom);
[; ;stdlib.h: 81: extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
[; ;stdlib.h: 85: extern unsigned long _lrotl(unsigned long value, unsigned int shift);
[; ;stdlib.h: 86: extern unsigned long _lrotr(unsigned long value, unsigned int shift);
[; ;stdlib.h: 87: extern unsigned int _rotl(unsigned int value, unsigned int shift);
[; ;stdlib.h: 88: extern unsigned int _rotr(unsigned int value, unsigned int shift);
[; ;stdlib.h: 93: extern void * malloc(size_t);
[; ;stdlib.h: 94: extern void free(void *);
[; ;stdlib.h: 95: extern void * realloc(void *, size_t);
[; ;xc8debug.h: 14: extern void __builtin_software_breakpoint(void);
[; ;stdlib.h: 104: extern int atexit(void (*)(void));
[; ;stdlib.h: 105: extern char * getenv(const char *);
[; ;stdlib.h: 106: extern char ** environ;
[; ;stdlib.h: 107: extern int system(char *);
[; ;stdlib.h: 108: extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
[; ;stdlib.h: 109: extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
[; ;stdlib.h: 110: extern int abs(int);
[; ;stdlib.h: 111: extern long labs(long);
[; ;stdlib.h: 113: extern char * itoa(char * buf, int val, int base);
[; ;stdlib.h: 114: extern char * utoa(char * buf, unsigned val, int base);
[; ;stdlib.h: 119: extern char * ltoa(char * buf, long val, int base);
[; ;stdlib.h: 120: extern char * ultoa(char * buf, unsigned long val, int base);
[; ;stdlib.h: 122: extern char * ftoa(float f, int * status);
[; ;string.h: 14: extern void * memcpy(void *, const void *, size_t);
[; ;string.h: 15: extern void * memmove(void *, const void *, size_t);
[; ;string.h: 16: extern void * memset(void *, int, size_t);
[; ;string.h: 36: extern char * strcat(char *, const char *);
[; ;string.h: 37: extern char * strcpy(char *, const char *);
[; ;string.h: 38: extern char * strncat(char *, const char *, size_t);
[; ;string.h: 39: extern char * strncpy(char *, const char *, size_t);
[; ;string.h: 40: extern char * strdup(const char *);
[; ;string.h: 41: extern char * strtok(char *, const char *);
[; ;string.h: 44: extern int memcmp(const void *, const void *, size_t);
[; ;string.h: 45: extern int strcmp(const char *, const char *);
[; ;string.h: 46: extern int stricmp(const char *, const char *);
[; ;string.h: 47: extern int strncmp(const char *, const char *, size_t);
[; ;string.h: 48: extern int strnicmp(const char *, const char *, size_t);
[; ;string.h: 49: extern void * memchr(const void *, int, size_t);
[; ;string.h: 50: extern size_t strcspn(const char *, const char *);
[; ;string.h: 51: extern char * strpbrk(const char *, const char *);
[; ;string.h: 52: extern size_t strspn(const char *, const char *);
[; ;string.h: 53: extern char * strstr(const char *, const char *);
[; ;string.h: 54: extern char * stristr(const char *, const char *);
[; ;string.h: 55: extern char * strerror(int);
[; ;string.h: 56: extern size_t strlen(const char *);
[; ;string.h: 57: extern char * strchr(const char *, int);
[; ;string.h: 58: extern char * strichr(const char *, int);
[; ;string.h: 59: extern char * strrchr(const char *, int);
[; ;string.h: 60: extern char * strrichr(const char *, int);
[; ;math.h: 30: extern double fabs(double);
[; ;math.h: 31: extern double floor(double);
[; ;math.h: 32: extern double ceil(double);
[; ;math.h: 33: extern double modf(double, double *);
[; ;math.h: 34: extern double sqrt(double);
[; ;math.h: 35: extern double atof(const char *);
[; ;math.h: 36: extern double sin(double) ;
[; ;math.h: 37: extern double cos(double) ;
[; ;math.h: 38: extern double tan(double) ;
[; ;math.h: 39: extern double asin(double) ;
[; ;math.h: 40: extern double acos(double) ;
[; ;math.h: 41: extern double atan(double);
[; ;math.h: 42: extern double atan2(double, double) ;
[; ;math.h: 43: extern double log(double);
[; ;math.h: 44: extern double log10(double);
[; ;math.h: 45: extern double pow(double, double) ;
[; ;math.h: 46: extern double exp(double) ;
[; ;math.h: 47: extern double sinh(double) ;
[; ;math.h: 48: extern double cosh(double) ;
[; ;math.h: 49: extern double tanh(double);
[; ;math.h: 50: extern double eval_poly(double, const double *, int);
[; ;math.h: 51: extern double frexp(double, int *);
[; ;math.h: 52: extern double ldexp(double, int);
[; ;math.h: 53: extern double fmod(double, double);
[; ;math.h: 54: extern double trunc(double);
[; ;math.h: 55: extern double round(double);
"12 C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c
[p n 350 ]
"358
[v _dpowers `Cul ~T0 @X0 -> 0 `x s ]
[i _dpowers
:U ..
-> -> -> 1 `i `l `ul
-> -> -> 10 `i `l `ul
-> -> -> 100 `i `l `ul
-> -> -> 1000 `i `l `ul
-> -> -> 10000 `i `l `ul
"360
-> -> 100000 `l `ul
-> -> 1000000 `l `ul
-> -> 10000000 `l `ul
-> -> 100000000 `l `ul
"363
-> -> 1000000000 `l `ul
..
]
[; ;doprnt.c: 358: const static unsigned long dpowers[] = {1, 10, 100, 1000, 10000,
[; ;doprnt.c: 360: 100000, 1000000, 10000000, 100000000,
[; ;doprnt.c: 361: 1000000000
[; ;doprnt.c: 363: };
[; ;doprnt.c: 396: extern const double _powers_[], _npowers_[];
[; ;doprnt.c: 400: extern unsigned long _div_to_l_(double, double);
[; ;doprnt.c: 402: extern unsigned long _tdiv_to_l_(float, float);
"417
[v _fround `(d ~T0 @X0 1 sf1`uc ]
"418
{
[; ;doprnt.c: 416: static double
[; ;doprnt.c: 417: fround(unsigned char prec)
[; ;doprnt.c: 418: {
[e :U _fround ]
"417
[v _prec `uc ~T0 @X0 1 r1 ]
"418
[f ]
[; ;doprnt.c: 421: if(prec>=110)
"421
[e $ ! >= -> _prec `i -> 110 `i 7  ]
[; ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * _npowers_[prec%10U];
"422
[e ) * * * .0.5 *U + &U __npowers_ * -> + / -> _prec `ui -> 100 `ui -> 18 `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> + / % -> _prec `ui -> 100 `ui -> 10 `ui -> 9 `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> % -> _prec `ui -> 10 `ui `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 6  ]
[e $U 8  ]
"423
[e :U 7 ]
[; ;doprnt.c: 423: else if(prec > 10)
[e $ ! > -> _prec `i -> 10 `i 9  ]
[; ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
"424
[e ) * * .0.5 *U + &U __npowers_ * -> + / -> _prec `ui -> 10 `ui -> 9 `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> % -> _prec `ui -> 10 `ui `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 6  ]
[e :U 9 ]
"425
[e :U 8 ]
[; ;doprnt.c: 425: return 0.5 * _npowers_[prec];
[e ) * .0.5 *U + &U __npowers_ * -> _prec `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 6  ]
[; ;doprnt.c: 426: }
"426
[e :UE 6 ]
}
"433
[v _scale `(d ~T0 @X0 1 sf1`c ]
"434
{
[; ;doprnt.c: 432: static double
[; ;doprnt.c: 433: scale(signed char scl)
[; ;doprnt.c: 434: {
[e :U _scale ]
"433
[v _scl `c ~T0 @X0 1 r1 ]
"434
[f ]
[; ;doprnt.c: 436: if(scl < 0) {
"436
[e $ ! < -> _scl `i -> 0 `i 11  ]
{
[; ;doprnt.c: 437: scl = -scl;
"437
[e = _scl -> -U -> _scl `i `c ]
[; ;doprnt.c: 438: if(scl>=110)
"438
[e $ ! >= -> _scl `i -> 110 `i 12  ]
[; ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char)((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
"439
[e ) * * *U + &U __npowers_ * -> -> + / -> _scl `i -> 100 `i -> 18 `i `uc `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> + / % -> _scl `i -> 100 `i -> 10 `i -> 9 `i `uc `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> % -> _scl `i -> 10 `i `uc `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 10  ]
[e $U 13  ]
"440
[e :U 12 ]
[; ;doprnt.c: 440: else if(scl > 10)
[e $ ! > -> _scl `i -> 10 `i 14  ]
[; ;doprnt.c: 441: return _npowers_[(unsigned char)(scl/10+9)] * _npowers_[(unsigned char)(scl%10)];
"441
[e ) * *U + &U __npowers_ * -> -> + / -> _scl `i -> 10 `i -> 9 `i `uc `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> % -> _scl `i -> 10 `i `uc `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 10  ]
[e :U 14 ]
"442
[e :U 13 ]
[; ;doprnt.c: 442: return _npowers_[(unsigned char)scl];
[e ) *U + &U __npowers_ * -> -> _scl `uc `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 10  ]
"443
}
[e :U 11 ]
[; ;doprnt.c: 443: }
[; ;doprnt.c: 444: if(scl>=110)
"444
[e $ ! >= -> _scl `i -> 110 `i 15  ]
[; ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)((scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
"445
[e ) * * *U + &U __powers_ * -> -> + / -> _scl `i -> 100 `i -> 18 `i `uc `ux -> -> # *U &U __powers_ `ui `ux *U + &U __powers_ * -> -> + / % -> _scl `i -> 100 `i -> 10 `i -> 9 `i `uc `ux -> -> # *U &U __powers_ `ui `ux *U + &U __powers_ * -> -> % -> _scl `i -> 10 `i `uc `ux -> -> # *U &U __powers_ `ui `ux ]
[e $UE 10  ]
[e $U 16  ]
"446
[e :U 15 ]
[; ;doprnt.c: 446: else if(scl > 10)
[e $ ! > -> _scl `i -> 10 `i 17  ]
[; ;doprnt.c: 447: return _powers_[(unsigned char)(scl/10+9)] * _powers_[(unsigned char)(scl%10)];
"447
[e ) * *U + &U __powers_ * -> -> + / -> _scl `i -> 10 `i -> 9 `i `uc `ux -> -> # *U &U __powers_ `ui `ux *U + &U __powers_ * -> -> % -> _scl `i -> 10 `i `uc `ux -> -> # *U &U __powers_ `ui `ux ]
[e $UE 10  ]
[e :U 17 ]
"448
[e :U 16 ]
[; ;doprnt.c: 448: return _powers_[(unsigned char)scl];
[e ) *U + &U __powers_ * -> -> _scl `uc `ux -> -> # *U &U __powers_ `ui `ux ]
[e $UE 10  ]
[; ;doprnt.c: 449: }
"449
[e :UE 10 ]
}
"500
[v _sprintf `(i ~T0 @X0 1 e1v`*uc`*Cuc ]
"501
{
[; ;doprnt.c: 463: int
[; ;doprnt.c: 500: sprintf(char * sp, const char * f, ...)
[; ;doprnt.c: 501: {
[e :U _sprintf ]
"500
[v _sp `*uc ~T0 @X0 1 r1 ]
[v _f `*Cuc ~T0 @X0 1 r0 ]
"501
[f ]
"502
[v _ap `*v ~T0 @X0 -> -> 1 `i `ux a ]
"507
[v _c `uc ~T0 @X0 1 a ]
"509
[v _width `i ~T0 @X0 1 a ]
"512
[v _prec `i ~T0 @X0 1 a ]
"520
[v _flag `us ~T0 @X0 1 a ]
"527
[v _d `uc ~T0 @X0 1 a ]
"528
[v _fval `d ~T0 @X0 1 a ]
"529
[v _eexp `i ~T0 @X0 1 a ]
"535
[u S18 `ul 1 `d 1 ]
[n S18 . vd integ ]
"538
[v _tmpval `S18 ~T0 @X0 1 a ]
"540
[v _val `ul ~T0 @X0 1 a ]
"541
[v _len `ui ~T0 @X0 1 a ]
"542
[v _cp `*Cuc ~T0 @X0 1 a ]
[; ;doprnt.c: 502: va_list ap;
[; ;doprnt.c: 507: char c;
[; ;doprnt.c: 509: int width;
[; ;doprnt.c: 512: int prec;
[; ;doprnt.c: 520: unsigned short flag;
[; ;doprnt.c: 527: char d;
[; ;doprnt.c: 528: double fval;
[; ;doprnt.c: 529: int eexp;
[; ;doprnt.c: 535: union {
[; ;doprnt.c: 536: unsigned long vd;
[; ;doprnt.c: 537: double integ;
[; ;doprnt.c: 538: } tmpval;
[; ;doprnt.c: 540: unsigned long val;
[; ;doprnt.c: 541: unsigned len;
[; ;doprnt.c: 542: const char * cp;
[; ;doprnt.c: 545: *ap = __va_start();
"545
[e = *U &U _ap ( ___va_start ..  ]
[; ;doprnt.c: 548: while((c = *f++)) {
"548
[e $U 20  ]
[e :U 21 ]
{
[; ;doprnt.c: 550: if(c != '%')
"550
[e $ ! != -> _c `ui -> 37 `ui 23  ]
[; ;doprnt.c: 552: {
"552
{
[; ;doprnt.c: 553: ((*sp++ = (c)));
"553
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x _c ]
[; ;doprnt.c: 554: continue;
"554
[e $U 20  ]
"555
}
[e :U 23 ]
[; ;doprnt.c: 555: }
[; ;doprnt.c: 558: width = 0;
"558
[e = _width -> 0 `i ]
[; ;doprnt.c: 560: flag = 0;
"560
[e = _flag -> -> 0 `i `us ]
[; ;doprnt.c: 562: for(;;) {
"562
{
[e :U 24 ]
{
[; ;doprnt.c: 563: switch(*f) {
"563
[e $U 28  ]
{
[; ;doprnt.c: 565: case '-':
"565
[e :U 29 ]
[; ;doprnt.c: 566: flag |= 0x08;
"566
[e =| _flag -> -> 8 `i `us ]
[; ;doprnt.c: 567: f++;
"567
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
[; ;doprnt.c: 568: continue;
"568
[e $U 26  ]
"596
}
[; ;doprnt.c: 596: }
[e $U 27  ]
"563
[e :U 28 ]
[e [\ *U _f , $ -> -> 45 `ui `uc 29
 27 ]
"596
[e :U 27 ]
[; ;doprnt.c: 597: break;
"597
[e $U 25  ]
"598
}
[e :U 26 ]
[; ;doprnt.c: 598: }
[e $U 24  ]
[e :U 25 ]
}
[; ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
"609
[e $ ! ( _isdigit (1 -> -> *U _f `ui `uc 30  ]
{
[; ;doprnt.c: 610: width = 0;
"610
[e = _width -> 0 `i ]
[; ;doprnt.c: 611: do {
"611
[e :U 33 ]
{
[; ;doprnt.c: 612: width *= 10;
"612
[e =* _width -> 10 `i ]
[; ;doprnt.c: 613: width += *f++ - '0';
"613
[e =+ _width -> - -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `ui -> 48 `ui `i ]
"614
}
[; ;doprnt.c: 614: } while(isdigit((unsigned)*f));
[e $ ( _isdigit (1 -> -> *U _f `ui `uc 33  ]
[e :U 32 ]
"620
}
[e :U 30 ]
[; ;doprnt.c: 620: }
[; ;doprnt.c: 623: if(*f == '.') {
"623
[e $ ! == -> *U _f `ui -> 46 `ui 34  ]
{
[; ;doprnt.c: 624: flag |= 0x4000;
"624
[e =| _flag -> -> 16384 `i `us ]
[; ;doprnt.c: 625: f++;
"625
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
[; ;doprnt.c: 639: {
"639
{
[; ;doprnt.c: 640: prec = 0;
"640
[e = _prec -> 0 `i ]
[; ;doprnt.c: 641: while(isdigit((unsigned)*f))
"641
[e $U 35  ]
[e :U 36 ]
[; ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
"642
[e = _prec -> - -> + * _prec -> 10 `i -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `i `ui -> 48 `ui `i ]
[e :U 35 ]
"641
[e $ ( _isdigit (1 -> -> *U _f `ui `uc 36  ]
[e :U 37 ]
"643
}
"644
}
[; ;doprnt.c: 643: }
[; ;doprnt.c: 644: } else {
[e $U 38  ]
[e :U 34 ]
{
[; ;doprnt.c: 645: prec = 0;
"645
[e = _prec -> 0 `i ]
[; ;doprnt.c: 647: flag |= 0x1000;
"647
[e =| _flag -> -> 4096 `i `us ]
"649
}
[e :U 38 ]
[; ;doprnt.c: 649: }
[; ;doprnt.c: 654: switch(c = *f++) {
"654
[e $U 40  ]
{
[; ;doprnt.c: 656: case 0:
"656
[e :U 41 ]
[; ;doprnt.c: 657: goto alldone;
"657
[e $U 42  ]
[; ;doprnt.c: 681: case 'f':
"681
[e :U 43 ]
[; ;doprnt.c: 682: flag |= 0x400;
"682
[e =| _flag -> -> 1024 `i `us ]
[; ;doprnt.c: 683: break;
"683
[e $U 39  ]
[; ;doprnt.c: 701: case 'g':
"701
[e :U 44 ]
[; ;doprnt.c: 702: flag |= 0x200;
"702
[e =| _flag -> -> 512 `i `us ]
[; ;doprnt.c: 703: break;
"703
[e $U 39  ]
[; ;doprnt.c: 821: default:
"821
[e :U 45 ]
[; ;doprnt.c: 832: continue;
"832
[e $U 20  ]
[; ;doprnt.c: 836: case 'u':
"836
[e :U 46 ]
[; ;doprnt.c: 837: flag |= 0xC0;
"837
[e =| _flag -> -> 192 `i `us ]
[; ;doprnt.c: 838: break;
"838
[e $U 39  ]
"841
}
[; ;doprnt.c: 841: }
[e $U 39  ]
"654
[e :U 40 ]
[e [\ = _c *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x , $ -> -> 0 `i `uc 41
 , $ -> -> 102 `ui `uc 43
 , $ -> -> 103 `ui `uc 44
 , $ -> -> 117 `ui `uc 46
 45 ]
"841
[e :U 39 ]
[; ;doprnt.c: 844: if(flag & (0x700)) {
"844
[e $ ! != & -> _flag `ui -> -> 1792 `i `ui -> -> 0 `i `ui 47  ]
{
[; ;doprnt.c: 846: if(flag & 0x1000)
"846
[e $ ! != & -> _flag `ui -> -> 4096 `i `ui -> -> 0 `i `ui 48  ]
[; ;doprnt.c: 848: prec = 6;
"848
[e = _prec -> 6 `i ]
[e :U 48 ]
[; ;doprnt.c: 849: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
"849
[e = _fval *U -> ( ___va_arg , (. -> *U -> &U _ap `**d `*v -> -> 0 `i `d `*d ]
[; ;doprnt.c: 850: if(fval < 0.0) {
"850
[e $ ! < _fval .0.0 49  ]
{
[; ;doprnt.c: 851: fval = -fval;
"851
[e = _fval -U _fval ]
[; ;doprnt.c: 852: flag |= 0x03;
"852
[e =| _flag -> -> 3 `i `us ]
"853
}
[e :U 49 ]
[; ;doprnt.c: 853: }
[; ;doprnt.c: 854: eexp = 0;
"854
[e = _eexp -> 0 `i ]
[; ;doprnt.c: 855: if( fval!=0) {
"855
[e $ ! != _fval -> -> 0 `i `d 50  ]
{
[; ;doprnt.c: 856: (void)(*(&eexp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255) - 126);
"856
[e = *U &U _eexp - -> -> & >> *U -> &U _fval `*ul -> 23 `i -> -> -> 255 `i `l `ul `uc `i -> 126 `i ]
[; ;doprnt.c: 857: eexp--;
"857
[e -- _eexp -> 1 `i ]
[; ;doprnt.c: 858: eexp *= 3;
"858
[e =* _eexp -> 3 `i ]
[; ;doprnt.c: 859: eexp /= 10;
"859
[e =/ _eexp -> -> 10 `uc `i ]
[; ;doprnt.c: 860: if(eexp < 0)
"860
[e $ ! < _eexp -> 0 `i 51  ]
[; ;doprnt.c: 861: eexp--;
"861
[e -- _eexp -> 1 `i ]
[e :U 51 ]
[; ;doprnt.c: 865: tmpval.integ = scale(-eexp);
"865
[e = . _tmpval 1 ( _scale (1 -> -U _eexp `c ]
[; ;doprnt.c: 866: tmpval.integ *= fval;
"866
[e =* . _tmpval 1 _fval ]
[; ;doprnt.c: 867: if(tmpval.integ < 1.0)
"867
[e $ ! < . _tmpval 1 .1.0 52  ]
[; ;doprnt.c: 868: eexp--;
"868
[e -- _eexp -> 1 `i ]
[e $U 53  ]
"869
[e :U 52 ]
[; ;doprnt.c: 869: else if(tmpval.integ >= 10.0)
[e $ ! >= . _tmpval 1 .10.0 54  ]
[; ;doprnt.c: 870: eexp++;
"870
[e ++ _eexp -> 1 `i ]
[e :U 54 ]
"871
[e :U 53 ]
}
[e :U 50 ]
[; ;doprnt.c: 871: }
[; ;doprnt.c: 873: if(eexp <= 0)
"873
[e $ ! <= _eexp -> 0 `i 55  ]
[; ;doprnt.c: 874: c = 1;
"874
[e = _c -> -> 1 `i `uc ]
[e $U 56  ]
"875
[e :U 55 ]
[; ;doprnt.c: 875: else
[; ;doprnt.c: 876: c = eexp;
"876
[e = _c -> _eexp `uc ]
[e :U 56 ]
[; ;doprnt.c: 877: if(
[; ;doprnt.c: 885: (flag & 0x200 && (eexp < -4 || eexp >= (int)prec))
[; ;doprnt.c: 887: ) {
"887
[e $ ! && != & -> _flag `ui -> -> 512 `i `ui -> -> 0 `i `ui || < _eexp -U -> 4 `i >= _eexp _prec 57  ]
{
[; ;doprnt.c: 889: if(prec && flag & 0x200)
"889
[e $ ! && != _prec -> 0 `i != & -> _flag `ui -> -> 512 `i `ui -> -> 0 `i `ui 58  ]
[; ;doprnt.c: 890: prec--;
"890
[e -- _prec -> 1 `i ]
[e :U 58 ]
[; ;doprnt.c: 892: if((unsigned)prec > (sizeof dpowers/sizeof dpowers[0]) - 2)
"892
[e $ ! > -> _prec `ui - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 2 `i `ui 59  ]
[; ;doprnt.c: 893: c = (sizeof dpowers/sizeof dpowers[0]) - 2;
"893
[e = _c -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 2 `i `ui `uc ]
[e $U 60  ]
"894
[e :U 59 ]
[; ;doprnt.c: 894: else
[; ;doprnt.c: 895: c = prec;
"895
[e = _c -> _prec `uc ]
[e :U 60 ]
[; ;doprnt.c: 896: if( fval!=0) {
"896
[e $ ! != _fval -> -> 0 `i `d 61  ]
{
[; ;doprnt.c: 897: fval /= scale(eexp-c);
"897
[e =/ _fval ( _scale (1 -> - _eexp -> _c `i `c ]
[; ;doprnt.c: 912: if(fval - (double)(unsigned long)fval >= 0.5)
"912
[e $ ! >= - _fval -> -> _fval `ul `d .0.5 62  ]
[; ;doprnt.c: 913: fval += 0.5;
"913
[e =+ _fval .0.5 ]
[e :U 62 ]
[; ;doprnt.c: 914: if((unsigned long)fval >= dpowers[c+1]) {
"914
[e $ ! >= -> _fval `ul *U + &U _dpowers * -> -> + -> _c `i -> 1 `i `ui `ux -> -> # *U &U _dpowers `ui `ux 63  ]
{
[; ;doprnt.c: 915: fval *= 1e-1;
"915
[e =* _fval .1e-1 ]
[; ;doprnt.c: 916: eexp++;
"916
[e ++ _eexp -> 1 `i ]
"917
}
[; ;doprnt.c: 917: } else if((unsigned long)fval < dpowers[c]) {
[e $U 64  ]
[e :U 63 ]
[e $ ! < -> _fval `ul *U + &U _dpowers * -> _c `ux -> -> # *U &U _dpowers `ui `ux 65  ]
{
[; ;doprnt.c: 918: fval *= 10.0;
"918
[e =* _fval .10.0 ]
[; ;doprnt.c: 919: eexp--;
"919
[e -- _eexp -> 1 `i ]
"920
}
[e :U 65 ]
"922
[e :U 64 ]
}
[e :U 61 ]
[; ;doprnt.c: 920: }
[; ;doprnt.c: 922: }
[; ;doprnt.c: 948: width -= prec + 5;
"948
[e =- _width + _prec -> 5 `i ]
[; ;doprnt.c: 953: if(flag & 0x03)
"953
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 66  ]
[; ;doprnt.c: 954: width--;
"954
[e -- _width -> 1 `i ]
[e :U 66 ]
[; ;doprnt.c: 978: {
"978
{
[; ;doprnt.c: 981: if(!(flag & 0x08))
"981
[e $ ! ! != & -> _flag `ui -> -> 8 `i `ui -> -> 0 `i `ui 67  ]
[; ;doprnt.c: 983: while(width > 0) {
"983
[e $U 68  ]
[e :U 69 ]
{
[; ;doprnt.c: 984: ((*sp++ = (' ')));
"984
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 32 `ui `uc ]
[; ;doprnt.c: 985: width--;
"985
[e -- _width -> 1 `i ]
"986
}
[e :U 68 ]
"983
[e $ > _width -> 0 `i 69  ]
[e :U 70 ]
"986
[e :U 67 ]
[; ;doprnt.c: 986: }
[; ;doprnt.c: 992: if(flag & 0x03)
"992
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 71  ]
[; ;doprnt.c: 993: ((*sp++ = ('-')));
"993
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 45 `ui `uc ]
[e :U 71 ]
"999
}
[; ;doprnt.c: 999: }
[; ;doprnt.c: 1004: val = (unsigned long)fval;
"1004
[e = _val -> _fval `ul ]
[; ;doprnt.c: 1005: ((*sp++ = (val/dpowers[c] + '0')));
"1005
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> + / _val *U + &U _dpowers * -> _c `ux -> -> # *U &U _dpowers `ui `ux -> -> 48 `ui `ul `uc ]
[; ;doprnt.c: 1006: val %= dpowers[c];
"1006
[e =% _val *U + &U _dpowers * -> _c `ux -> -> # *U &U _dpowers `ui `ux ]
[; ;doprnt.c: 1011: if(prec)
"1011
[e $ ! != _prec -> 0 `i 72  ]
[; ;doprnt.c: 1013: {
"1013
{
[; ;doprnt.c: 1014: ((*sp++ = ('.')));
"1014
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 46 `ui `uc ]
[; ;doprnt.c: 1015: prec -= c;
"1015
[e =- _prec -> _c `i ]
[; ;doprnt.c: 1016: while(c--) {
"1016
[e $U 73  ]
[e :U 74 ]
{
[; ;doprnt.c: 1021: if(flag & 0x200 && val == 0) {
"1021
[e $ ! && != & -> _flag `ui -> -> 512 `i `ui -> -> 0 `i `ui == _val -> -> -> 0 `i `l `ul 76  ]
{
[; ;doprnt.c: 1022: prec = c = 0;
"1022
[e = _prec -> = _c -> -> 0 `i `uc `i ]
[; ;doprnt.c: 1023: break;
"1023
[e $U 75  ]
"1024
}
[e :U 76 ]
[; ;doprnt.c: 1024: }
[; ;doprnt.c: 1026: ((*sp++ = ('0' + (val/dpowers[c]))));
"1026
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> + -> -> 48 `ui `ul / _val *U + &U _dpowers * -> _c `ux -> -> # *U &U _dpowers `ui `ux `uc ]
[; ;doprnt.c: 1027: val %= dpowers[c];
"1027
[e =% _val *U + &U _dpowers * -> _c `ux -> -> # *U &U _dpowers `ui `ux ]
"1029
}
[e :U 73 ]
"1016
[e $ != -> -- _c -> -> 1 `i `uc `i -> -> -> 0 `i `uc `i 74  ]
[e :U 75 ]
[; ;doprnt.c: 1029: }
[; ;doprnt.c: 1030: while(prec) {
"1030
[e $U 77  ]
[e :U 78 ]
{
[; ;doprnt.c: 1031: ((*sp++ = ('0')));
"1031
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 48 `ui `uc ]
[; ;doprnt.c: 1032: prec--;
"1032
[e -- _prec -> 1 `i ]
"1033
}
[e :U 77 ]
"1030
[e $ != _prec -> 0 `i 78  ]
[e :U 79 ]
"1034
}
[e :U 72 ]
[; ;doprnt.c: 1033: }
[; ;doprnt.c: 1034: }
[; ;doprnt.c: 1040: ((*sp++ = ('e')));
"1040
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 101 `ui `uc ]
[; ;doprnt.c: 1041: if(eexp < 0) {
"1041
[e $ ! < _eexp -> 0 `i 80  ]
{
[; ;doprnt.c: 1042: eexp = -eexp;
"1042
[e = _eexp -U _eexp ]
[; ;doprnt.c: 1043: ((*sp++ = ('-')));
"1043
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 45 `ui `uc ]
"1044
}
[; ;doprnt.c: 1044: } else
[e $U 81  ]
[e :U 80 ]
[; ;doprnt.c: 1045: ((*sp++ = ('+')));
"1045
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 43 `ui `uc ]
[e :U 81 ]
[; ;doprnt.c: 1058: ((*sp++ = (eexp / 10 + '0')));
"1058
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> + -> / _eexp -> 10 `i `ui -> 48 `ui `uc ]
[; ;doprnt.c: 1059: ((*sp++ = (eexp % 10 + '0')));
"1059
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> + -> % _eexp -> 10 `i `ui -> 48 `ui `uc ]
[; ;doprnt.c: 1061: if((flag & 0x08) && width > 0)
"1061
[e $ ! && != & -> _flag `ui -> -> 8 `i `ui -> -> 0 `i `ui > _width -> 0 `i 82  ]
[; ;doprnt.c: 1062: do
"1062
[e :U 85 ]
[; ;doprnt.c: 1063: ((*sp++ = (' ')));
"1063
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 32 `ui `uc ]
[; ;doprnt.c: 1064: while(--width);
"1064
[e $ != =- _width -> 1 `i -> 0 `i 85  ]
[e :U 84 ]
[e :U 82 ]
[; ;doprnt.c: 1066: continue;
"1066
[e $U 20  ]
"1067
}
[e :U 57 ]
[; ;doprnt.c: 1067: }
[; ;doprnt.c: 1106: if(flag & 0x200) {
"1106
[e $ ! != & -> _flag `ui -> -> 512 `i `ui -> -> 0 `i `ui 86  ]
{
[; ;doprnt.c: 1107: if(eexp < 0)
"1107
[e $ ! < _eexp -> 0 `i 87  ]
[; ;doprnt.c: 1108: prec -= (eexp+1);
"1108
[e =- _prec + _eexp -> 1 `i ]
[e :U 87 ]
[; ;doprnt.c: 1110: val = (unsigned long)fval;
"1110
[e = _val -> _fval `ul ]
[; ;doprnt.c: 1111: for(c = 0 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
"1111
{
[e = _c -> -> 0 `i `uc ]
[e $ != -> _c `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 88  ]
[e $U 89  ]
"1112
[e :U 88 ]
[; ;doprnt.c: 1112: if(val < dpowers[c])
[e $ ! < _val *U + &U _dpowers * -> _c `ux -> -> # *U &U _dpowers `ui `ux 91  ]
[; ;doprnt.c: 1113: break;
"1113
[e $U 89  ]
[e :U 91 ]
"1111
[e ++ _c -> -> 1 `i `uc ]
[e $ != -> _c `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 88  ]
[e :U 89 ]
"1114
}
[; ;doprnt.c: 1114: prec -= c;
[e =- _prec -> _c `i ]
[; ;doprnt.c: 1115: if(prec <= 12)
"1115
[e $ ! <= _prec -> 12 `i 92  ]
[; ;doprnt.c: 1116: fval += fround(prec);
"1116
[e =+ _fval ( _fround (1 -> _prec `uc ]
[e :U 92 ]
[; ;doprnt.c: 1119: {
"1119
{
"1120
[v _temp `d ~T0 @X0 1 a ]
[; ;doprnt.c: 1120: double temp;
[; ;doprnt.c: 1121: temp = scale(prec);
"1121
[e = _temp ( _scale (1 -> _prec `c ]
[; ;doprnt.c: 1122: temp *= fval - (double)val;
"1122
[e =* _temp - _fval -> _val `d ]
[; ;doprnt.c: 1123: val = (unsigned long)temp;
"1123
[e = _val -> _temp `ul ]
"1124
}
[; ;doprnt.c: 1124: }
[; ;doprnt.c: 1125: while(prec && val % 10 == 0) {
"1125
[e $U 93  ]
[e :U 94 ]
{
[; ;doprnt.c: 1126: val /= 10;
"1126
[e =/ _val -> -> 10 `uc `ul ]
[; ;doprnt.c: 1127: prec--;
"1127
[e -- _prec -> 1 `i ]
"1128
}
[e :U 93 ]
"1125
[e $ && != _prec -> 0 `i == % _val -> -> -> 10 `i `l `ul -> -> -> 0 `i `l `ul 94  ]
[e :U 95 ]
"1129
}
[; ;doprnt.c: 1128: }
[; ;doprnt.c: 1129: } else
[e $U 96  ]
[e :U 86 ]
[; ;doprnt.c: 1131: if(prec <= 12)
"1131
[e $ ! <= _prec -> 12 `i 97  ]
[; ;doprnt.c: 1132: fval += fround((unsigned int)prec);
"1132
[e =+ _fval ( _fround (1 -> -> _prec `ui `uc ]
[e :U 97 ]
"1135
[e :U 96 ]
[; ;doprnt.c: 1135: if((eexp > 9)||(fval != 0 && (unsigned long)fval == 0 && eexp > 1)) {
[e $ ! || > _eexp -> 9 `i && && != _fval -> -> 0 `i `d == -> _fval `ul -> -> -> 0 `i `l `ul > _eexp -> 1 `i 98  ]
{
[; ;doprnt.c: 1139: if(tmpval.integ < 4.294967296){
"1139
[e $ ! < . _tmpval 1 .4.294967296 99  ]
{
[; ;doprnt.c: 1140: eexp -= (sizeof dpowers/sizeof dpowers[0])-1;
"1140
[e =- _eexp -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 1 `i `ui `i ]
"1141
}
[; ;doprnt.c: 1141: }else{
[e $U 100  ]
[e :U 99 ]
{
[; ;doprnt.c: 1142: eexp -= (sizeof dpowers/sizeof dpowers[0])-2;
"1142
[e =- _eexp -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 2 `i `ui `i ]
"1143
}
[e :U 100 ]
[; ;doprnt.c: 1143: }
[; ;doprnt.c: 1144: tmpval.integ = scale(eexp);
"1144
[e = . _tmpval 1 ( _scale (1 -> _eexp `c ]
[; ;doprnt.c: 1145: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_l_(fval,tmpval.integ));
"1145
[e = _val ? == -> # `d `ui -> -> 3 `i `ui : ( __tdiv_to_l_ (2 , -> _fval `f -> . _tmpval 1 `f ( __div_to_l_ (2 , _fval . _tmpval 1 ]
[; ;doprnt.c: 1148: fval = 0.0;
"1148
[e = _fval .0.0 ]
"1149
}
[; ;doprnt.c: 1149: } else {
[e $U 101  ]
[e :U 98 ]
{
[; ;doprnt.c: 1150: val = (unsigned long)fval;
"1150
[e = _val -> _fval `ul ]
[; ;doprnt.c: 1151: fval -= (double)val;
"1151
[e =- _fval -> _val `d ]
[; ;doprnt.c: 1152: eexp = 0;
"1152
[e = _eexp -> 0 `i ]
"1153
}
[e :U 101 ]
[; ;doprnt.c: 1153: }
[; ;doprnt.c: 1155: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
"1155
{
[e = _c -> -> 1 `i `uc ]
[e $ != -> _c `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 102  ]
[e $U 103  ]
"1156
[e :U 102 ]
[; ;doprnt.c: 1156: if(val < dpowers[c])
[e $ ! < _val *U + &U _dpowers * -> _c `ux -> -> # *U &U _dpowers `ui `ux 105  ]
[; ;doprnt.c: 1157: break;
"1157
[e $U 103  ]
[e :U 105 ]
"1155
[e ++ _c -> -> 1 `i `uc ]
[e $ != -> _c `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 102  ]
[e :U 103 ]
"1161
}
[; ;doprnt.c: 1161: width -= prec + c + eexp;
[e =- _width + + _prec -> _c `i _eexp ]
[; ;doprnt.c: 1162: if(
[; ;doprnt.c: 1166: prec)
"1166
[e $ ! != _prec -> 0 `i 106  ]
[; ;doprnt.c: 1167: width--;
"1167
[e -- _width -> 1 `i ]
[e :U 106 ]
[; ;doprnt.c: 1168: if(flag & 0x03)
"1168
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 107  ]
[; ;doprnt.c: 1169: width--;
"1169
[e -- _width -> 1 `i ]
[e :U 107 ]
[; ;doprnt.c: 1194: {
"1194
{
[; ;doprnt.c: 1196: if(!(flag & 0x08))
"1196
[e $ ! ! != & -> _flag `ui -> -> 8 `i `ui -> -> 0 `i `ui 108  ]
[; ;doprnt.c: 1199: while(width > 0) {
"1199
[e $U 109  ]
[e :U 110 ]
{
[; ;doprnt.c: 1200: ((*sp++ = (' ')));
"1200
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 32 `ui `uc ]
[; ;doprnt.c: 1201: width--;
"1201
[e -- _width -> 1 `i ]
"1202
}
[e :U 109 ]
"1199
[e $ > _width -> 0 `i 110  ]
[e :U 111 ]
"1202
[e :U 108 ]
[; ;doprnt.c: 1202: }
[; ;doprnt.c: 1207: if(flag & 0x03)
"1207
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 112  ]
[; ;doprnt.c: 1209: ((*sp++ = ('-')));
"1209
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 45 `ui `uc ]
[e :U 112 ]
"1214
}
[; ;doprnt.c: 1214: }
[; ;doprnt.c: 1215: while(c--) {
"1215
[e $U 113  ]
[e :U 114 ]
{
[; ;doprnt.c: 1219: {
"1219
{
[; ;doprnt.c: 1220: tmpval.vd = val/dpowers[c];
"1220
[e = . _tmpval 0 / _val *U + &U _dpowers * -> _c `ux -> -> # *U &U _dpowers `ui `ux ]
[; ;doprnt.c: 1221: tmpval.vd %= 10;
"1221
[e =% . _tmpval 0 -> -> 10 `uc `ul ]
[; ;doprnt.c: 1222: ((*sp++ = ('0' + tmpval.vd)));
"1222
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> + -> -> 48 `ui `ul . _tmpval 0 `uc ]
"1223
}
"1225
}
[e :U 113 ]
"1215
[e $ != -> -- _c -> -> 1 `i `uc `i -> -> -> 0 `i `uc `i 114  ]
[e :U 115 ]
[; ;doprnt.c: 1223: }
[; ;doprnt.c: 1225: }
[; ;doprnt.c: 1226: while(eexp > 0) {
"1226
[e $U 116  ]
[e :U 117 ]
{
[; ;doprnt.c: 1227: ((*sp++ = ('0')));
"1227
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 48 `ui `uc ]
[; ;doprnt.c: 1228: eexp--;
"1228
[e -- _eexp -> 1 `i ]
"1229
}
[e :U 116 ]
"1226
[e $ > _eexp -> 0 `i 117  ]
[e :U 118 ]
[; ;doprnt.c: 1229: }
[; ;doprnt.c: 1230: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
"1230
[e $ ! > _prec -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 2 `i `ui `i 119  ]
[; ;doprnt.c: 1231: c = (sizeof dpowers/sizeof dpowers[0])-2;
"1231
[e = _c -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 2 `i `ui `uc ]
[e $U 120  ]
"1232
[e :U 119 ]
[; ;doprnt.c: 1232: else
[; ;doprnt.c: 1233: c = (char)prec;
"1233
[e = _c -> _prec `uc ]
[e :U 120 ]
[; ;doprnt.c: 1234: prec -= (int)c;
"1234
[e =- _prec -> _c `i ]
[; ;doprnt.c: 1238: if(c)
"1238
[e $ ! != -> _c `i -> -> -> 0 `i `uc `i 121  ]
[; ;doprnt.c: 1240: ((*sp++ = ('.')));
"1240
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 46 `ui `uc ]
[e :U 121 ]
[; ;doprnt.c: 1246: val = (unsigned long)(fval * scale((signed char)c));
"1246
[e = _val -> * _fval ( _scale (1 -> _c `c `ul ]
[; ;doprnt.c: 1247: while(c--) {
"1247
[e $U 122  ]
[e :U 123 ]
{
[; ;doprnt.c: 1248: tmpval.vd = val/dpowers[c];
"1248
[e = . _tmpval 0 / _val *U + &U _dpowers * -> _c `ux -> -> # *U &U _dpowers `ui `ux ]
[; ;doprnt.c: 1249: tmpval.vd %= 10;
"1249
[e =% . _tmpval 0 -> -> 10 `uc `ul ]
[; ;doprnt.c: 1250: ((*sp++ = ('0' + tmpval.vd)));
"1250
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> + -> -> 48 `ui `ul . _tmpval 0 `uc ]
[; ;doprnt.c: 1251: val %= dpowers[c];
"1251
[e =% _val *U + &U _dpowers * -> _c `ux -> -> # *U &U _dpowers `ui `ux ]
"1252
}
[e :U 122 ]
"1247
[e $ != -> -- _c -> -> 1 `i `uc `i -> -> -> 0 `i `uc `i 123  ]
[e :U 124 ]
[; ;doprnt.c: 1252: }
[; ;doprnt.c: 1254: while(prec) {
"1254
[e $U 125  ]
[e :U 126 ]
{
[; ;doprnt.c: 1255: ((*sp++ = ('0')));
"1255
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 48 `ui `uc ]
[; ;doprnt.c: 1256: prec--;
"1256
[e -- _prec -> 1 `i ]
"1257
}
[e :U 125 ]
"1254
[e $ != _prec -> 0 `i 126  ]
[e :U 127 ]
[; ;doprnt.c: 1257: }
[; ;doprnt.c: 1259: if((flag & 0x08) && width > 0)
"1259
[e $ ! && != & -> _flag `ui -> -> 8 `i `ui -> -> 0 `i `ui > _width -> 0 `i 128  ]
[; ;doprnt.c: 1260: do
"1260
[e :U 131 ]
[; ;doprnt.c: 1261: ((*sp++ = (' ')));
"1261
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 32 `ui `uc ]
[; ;doprnt.c: 1262: while(--width);
"1262
[e $ != =- _width -> 1 `i -> 0 `i 131  ]
[e :U 130 ]
[e :U 128 ]
[; ;doprnt.c: 1264: continue;
"1264
[e $U 20  ]
"1265
}
[e :U 47 ]
[; ;doprnt.c: 1265: }
[; ;doprnt.c: 1292: {
"1292
{
[; ;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
"1305
[e = _val -> *U -> ( ___va_arg , (. -> *U -> &U _ap `**ui `*v -> -> 0 `i `ui `*ui `ul ]
"1306
}
[; ;doprnt.c: 1306: }
[; ;doprnt.c: 1309: if(prec == 0 && val == 0)
"1309
[e $ ! && == _prec -> 0 `i == _val -> -> -> 0 `i `l `ul 132  ]
[; ;doprnt.c: 1310: prec++;
"1310
[e ++ _prec -> 1 `i ]
[e :U 132 ]
[; ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
"1324
{
[e = _c -> -> 1 `i `uc ]
[e $ != -> _c `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 133  ]
[e $U 134  ]
"1325
[e :U 133 ]
[; ;doprnt.c: 1325: if(val < dpowers[c])
[e $ ! < _val *U + &U _dpowers * -> _c `ux -> -> # *U &U _dpowers `ui `ux 136  ]
[; ;doprnt.c: 1326: break;
"1326
[e $U 134  ]
[e :U 136 ]
"1324
[e ++ _c -> -> 1 `i `uc ]
[e $ != -> _c `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 133  ]
[e :U 134 ]
"1358
}
[; ;doprnt.c: 1358: if(c < prec)
[e $ ! < -> _c `i _prec 137  ]
[; ;doprnt.c: 1359: c = prec;
"1359
[e = _c -> _prec `uc ]
[e $U 138  ]
"1360
[e :U 137 ]
[; ;doprnt.c: 1360: else if(prec < c)
[e $ ! < _prec -> _c `i 139  ]
[; ;doprnt.c: 1361: prec = c;
"1361
[e = _prec -> _c `i ]
[e :U 139 ]
"1364
[e :U 138 ]
[; ;doprnt.c: 1364: if(width && flag & 0x03)
[e $ ! && != _width -> 0 `i != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 140  ]
[; ;doprnt.c: 1365: width--;
"1365
[e -- _width -> 1 `i ]
[e :U 140 ]
[; ;doprnt.c: 1367: if(flag & 0x4000) {
"1367
[e $ ! != & -> _flag `ui -> -> 16384 `i `ui -> -> 0 `i `ui 141  ]
{
[; ;doprnt.c: 1368: if(width > prec)
"1368
[e $ ! > _width _prec 142  ]
[; ;doprnt.c: 1369: width -= prec;
"1369
[e =- _width _prec ]
[e $U 143  ]
"1370
[e :U 142 ]
[; ;doprnt.c: 1370: else
[; ;doprnt.c: 1371: width = 0;
"1371
[e = _width -> 0 `i ]
[e :U 143 ]
"1372
}
[e :U 141 ]
[; ;doprnt.c: 1372: }
[; ;doprnt.c: 1400: if(width > c)
"1400
[e $ ! > _width -> _c `i 144  ]
[; ;doprnt.c: 1401: width -= c;
"1401
[e =- _width -> _c `i ]
[e $U 145  ]
"1402
[e :U 144 ]
[; ;doprnt.c: 1402: else
[; ;doprnt.c: 1403: width = 0;
"1403
[e = _width -> 0 `i ]
[e :U 145 ]
[; ;doprnt.c: 1441: {
"1441
{
[; ;doprnt.c: 1443: if(width
[; ;doprnt.c: 1445: && !(flag & 0x08)
[; ;doprnt.c: 1447: )
"1447
[e $ ! && != _width -> 0 `i ! != & -> _flag `ui -> -> 8 `i `ui -> -> 0 `i `ui 146  ]
[; ;doprnt.c: 1448: do
"1448
[e :U 149 ]
[; ;doprnt.c: 1449: ((*sp++ = (' ')));
"1449
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 32 `ui `uc ]
[; ;doprnt.c: 1450: while(--width);
"1450
[e $ != =- _width -> 1 `i -> 0 `i 149  ]
[e :U 148 ]
[e :U 146 ]
[; ;doprnt.c: 1457: if(flag & 0x03)
"1457
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 150  ]
[; ;doprnt.c: 1458: ((*sp++ = ('-')));
"1458
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 45 `ui `uc ]
[e :U 150 ]
"1488
}
[; ;doprnt.c: 1488: }
[; ;doprnt.c: 1493: while(prec--) {
"1493
[e $U 151  ]
[e :U 152 ]
{
[; ;doprnt.c: 1497: {
"1497
{
[; ;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
"1508
[e = _c -> + % / _val *U + &U _dpowers * -> -> _prec `ui `ux -> -> # *U &U _dpowers `ui `ux -> -> -> 10 `i `l `ul -> -> 48 `ui `ul `uc ]
"1542
}
[; ;doprnt.c: 1542: }
[; ;doprnt.c: 1543: ((*sp++ = (c)));
"1543
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x _c ]
"1544
}
[e :U 151 ]
"1493
[e $ != -- _prec -> 1 `i -> 0 `i 152  ]
[e :U 153 ]
[; ;doprnt.c: 1544: }
[; ;doprnt.c: 1547: if((flag & 0x08) && width > 0)
"1547
[e $ ! && != & -> _flag `ui -> -> 8 `i `ui -> -> 0 `i `ui > _width -> 0 `i 154  ]
[; ;doprnt.c: 1548: do
"1548
[e :U 157 ]
[; ;doprnt.c: 1549: ((*sp++ = (' ')));
"1549
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 32 `ui `uc ]
[; ;doprnt.c: 1550: while(--width);
"1550
[e $ != =- _width -> 1 `i -> 0 `i 157  ]
[e :U 156 ]
[e :U 154 ]
"1552
}
[e :U 20 ]
"548
[e $ != -> = _c *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `i -> -> -> 0 `i `uc `i 21  ]
[e :U 22 ]
[; ;doprnt.c: 1552: }
[; ;doprnt.c: 1554: alldone:
"1554
[e :U 42 ]
[; ;doprnt.c: 1557: *sp = 0;
"1557
[e = *U _sp -> -> 0 `i `uc ]
[; ;doprnt.c: 1559: return 0;
"1559
[e ) -> 0 `i ]
[e $UE 19  ]
[; ;doprnt.c: 1560: }
"1560
[e :UE 19 ]
}
